#!/bin/bash
# ===========================================
# –§–∞–π–ª: scripts/check-prerequisites.sh
# ===========================================

set -e  # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –æ—à–∏–±–∫–µ

echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è QA DevOps Workshop..."
echo "=================================================="

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–∞–Ω–¥—ã
check_command() {
    local cmd=$1
    local name=$2
    local required=$3
    
    if command -v "$cmd" &> /dev/null; then
        echo -e "${GREEN}‚úÖ $name —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${NC}"
        if [[ "$cmd" == "docker" ]]; then
            echo "   –í–µ—Ä—Å–∏—è: $(docker --version)"
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Docker daemon –∑–∞–ø—É—â–µ–Ω
            if docker info &> /dev/null; then
                echo -e "${GREEN}   ‚úÖ Docker daemon –∑–∞–ø—É—â–µ–Ω${NC}"
            else
                echo -e "${RED}   ‚ùå Docker daemon –Ω–µ –∑–∞–ø—É—â–µ–Ω${NC}"
                echo "   üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ Docker Desktop –∏–ª–∏ systemctl start docker"
                if [[ "$required" == "true" ]]; then
                    exit 1
                fi
            fi
        elif [[ "$cmd" == "python3" ]]; then
            echo "   –í–µ—Ä—Å–∏—è: $(python3 --version)"
        elif [[ "$cmd" == "kubectl" ]]; then
            echo "   –í–µ—Ä—Å–∏—è: $(kubectl version --client --short 2>/dev/null || echo 'kubectl version error')"
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫–ª–∞—Å—Ç–µ—Ä—É
            if kubectl cluster-info &> /dev/null; then
                echo -e "${GREEN}   ‚úÖ –ï—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ Kubernetes –∫–ª–∞—Å—Ç–µ—Ä—É${NC}"
            else
                echo -e "${YELLOW}   ‚ö†Ô∏è  –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ Kubernetes –∫–ª–∞—Å—Ç–µ—Ä—É${NC}"
            fi
        elif [[ "$cmd" == "helm" ]]; then
            echo "   –í–µ—Ä—Å–∏—è: $(helm version --short 2>/dev/null || echo 'helm version error')"
        elif [[ "$cmd" == "git" ]]; then
            echo "   –í–µ—Ä—Å–∏—è: $(git --version)"
        fi
    else
        if [[ "$required" == "true" ]]; then
            echo -e "${RED}‚ùå $name –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)${NC}"
            exit 1
        else
            echo -e "${YELLOW}‚ö†Ô∏è  $name –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)${NC}"
        fi
    fi
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Python –ø–∞–∫–µ—Ç–æ–≤
check_python_packages() {
    echo -e "\n${BLUE}üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ Python –ø–∞–∫–µ—Ç–æ–≤...${NC}"
    
    local packages=("requests" "pytest" "selenium")
    for pkg in "${packages[@]}"; do
        if python3 -c "import $pkg" &> /dev/null; then
            echo -e "${GREEN}‚úÖ Python –ø–∞–∫–µ—Ç '$pkg' –¥–æ—Å—Ç—É–ø–µ–Ω${NC}"
        else
            echo -e "${YELLOW}‚ö†Ô∏è  Python –ø–∞–∫–µ—Ç '$pkg' –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${NC}"
            echo "   üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip3 install $pkg"
        fi
    done
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Ä—Ç–æ–≤
check_ports() {
    echo -e "\n${BLUE}üîå –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–æ–≤...${NC}"
    
    local ports=(8000 8001 5432)
    for port in "${ports[@]}"; do
        if lsof -i :$port &> /dev/null || netstat -tuln 2>/dev/null | grep :$port &> /dev/null; then
            echo -e "${YELLOW}‚ö†Ô∏è  –ü–æ—Ä—Ç $port –∑–∞–Ω—è—Ç${NC}"
        else
            echo -e "${GREEN}‚úÖ –ü–æ—Ä—Ç $port —Å–≤–æ–±–æ–¥–µ–Ω${NC}"
        fi
    done
}

# –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
echo -e "${BLUE}üîß –û—Å–Ω–æ–≤–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:${NC}"
check_command "docker" "Docker" "true"
check_command "python3" "Python 3" "true"  
check_command "git" "Git" "true"

echo -e "\n${BLUE}‚ò∏Ô∏è  Kubernetes –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:${NC}"
check_command "kubectl" "kubectl" "false"
check_command "helm" "Helm" "false"

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
check_python_packages
check_ports

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ
echo -e "\n${BLUE}üíæ –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ...${NC}"
if [[ "$OSTYPE" == "darwin"* ]]; then
    # macOS
    available_space=$(df -h . | tail -1 | awk '{print $4}')
    echo -e "${GREEN}‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ –º–µ—Å—Ç–∞: $available_space${NC}"
elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
    # Linux
    available_space=$(df -h . | tail -1 | awk '{print $4}')
    echo -e "${GREEN}‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ –º–µ—Å—Ç–∞: $available_space${NC}"
else
    # Windows (Git Bash)
    echo -e "${YELLOW}‚ö†Ô∏è  –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 5+ GB)${NC}"
fi

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
echo -e "\n${BLUE}üìÅ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–±–æ—á–∏—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π...${NC}"
mkdir -p {reports,logs,artifacts}
echo -e "${GREEN}‚úÖ –†–∞–±–æ—á–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã${NC}"

echo -e "\n${GREEN}üéâ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!${NC}"
echo "=================================================="
echo -e "${BLUE}üí° –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è:${NC}"
echo "   ‚Ä¢ Docker Desktop –∑–∞–ø—É—â–µ–Ω"
echo "   ‚Ä¢ Python 3.8+"
echo "   ‚Ä¢ kubectl (–¥–ª—è Kubernetes –ø—Ä–∏–º–µ—Ä–æ–≤)"
echo "   ‚Ä¢ 5+ GB —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞"