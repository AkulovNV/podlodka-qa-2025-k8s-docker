#!/bin/bash

set -e

echo "üê≥ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –≤ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ..."
echo "======================================="

# –¶–≤–µ—Ç–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Docker
if ! command -v docker &> /dev/null; then
    log_error "Docker –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker Desktop."
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Docker –¥–µ–º–æ–Ω –∑–∞–ø—É—â–µ–Ω
if ! docker info &> /dev/null; then
    log_error "Docker –¥–µ–º–æ–Ω –Ω–µ –∑–∞–ø—É—â–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ Docker Desktop."
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
if [[ ! -f "Dockerfile" ]]; then
    log_error "Dockerfile –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å–∫–∞–π—Ç–µ –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ 01-tests-in-container/"
    exit 1
fi

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
mkdir -p reports
log_info "–°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è reports/"

# –ò–º—è –æ–±—Ä–∞–∑–∞
IMAGE_NAME="qa-tests"
CONTAINER_NAME="qa-tests-run"

log_info "–°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞..."
docker build -t $IMAGE_NAME . \
    --label "workshop=qa-devops" \
    --label "component=tests" || {
    log_error "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å Docker –æ–±—Ä–∞–∑"
    exit 1
}

log_success "Docker –æ–±—Ä–∞–∑ —Å–æ–±—Ä–∞–Ω: $IMAGE_NAME"

log_info "–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ..."

# –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
docker rm $CONTAINER_NAME 2>/dev/null || true

# –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —Å –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º volume –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
docker run --name $CONTAINER_NAME \
    -v "$(pwd)/reports:/app/reports" \
    -e "TEST_ENV=docker" \
    -e "CI=true" \
    $IMAGE_NAME || {

    log_error "–¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏"
    log_info "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Ç—á–µ—Ç—ã –≤ reports/"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–≥–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    echo ""
    echo "üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞:"
    docker logs $CONTAINER_NAME --tail 20 || true
    
    exit 1
}

log_success "–¢–µ—Å—Ç—ã –≤ Docker –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç—ã
echo ""
echo "üìä –°–æ–∑–¥–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç—ã:"
if [[ -f "reports/report.html" ]]; then
    log_success "HTML –æ—Ç—á–µ—Ç: $(pwd)/reports/report.html"
    echo "   –û—Ç–∫—Ä–æ–π—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ: open reports/report.html"
fi

if [[ -f "reports/junit.xml" ]]; then
    log_success "JUnit XML: $(pwd)/reports/junit.xml"
fi

if [[ -d "reports/allure" ]]; then
    log_success "Allure –¥–∞–Ω–Ω—ã–µ: $(pwd)/reports/allure/"
    if command -v allure &> /dev/null; then
        echo "   –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ Allure –æ—Ç—á–µ—Ç–∞: allure serve reports/allure"
    else
        log_info "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Allure –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç—á–µ—Ç–æ–≤: npm install -g allure-commandline"
    fi
fi

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –æ–±—Ä–∞–∑–∞
echo ""
echo "üìè –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—Ä–∞–∑–µ:"
docker images $IMAGE_NAME --format "table {{.Repository}}\t{{.Tag}}\t{{.Size}}\t{{.CreatedAt}}"

echo ""
echo "üéâ –ì–æ—Ç–æ–≤–æ!"
echo "============"
echo "–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –∑–∞–ø—É—Å–∫–∞ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ:"
echo "‚úÖ –ò–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ"
echo "‚úÖ –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"
echo "‚úÖ –ù–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"
echo "‚úÖ –ì–æ—Ç–æ–≤–æ –∫ CI/CD"