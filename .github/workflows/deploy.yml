name: Deploy Service

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      registry:
        required: false
        type: string
        default: cr.yandex
      registry-path:
        required: false
        type: string
        default: crp8fh8qsgbjccrgdjdj
      app-name:
        required: false
        type: string
        default: qa-devops
      helm-chart-path:
        required: false
        type: string
        default: 03-qa-environment-k8s/helm/app
      cluster-name:
        required: true
        type: string
    secrets:
      YC_IAM_TOKEN:
        required: true
      # YC_SA_KEY_BASE64:
      #   required: true

concurrency:
  group: deploy-${{ github.workflow }}-${{ inputs.environment }}
  cancel-in-progress: true

jobs:
  tests:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.set-tag.outputs.tag }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set TAG output
      id: set-tag
      run: |
        TAG=$(git describe --tags 2>/dev/null || git rev-parse --short HEAD)
        echo "tag=$TAG" >> $GITHUB_OUTPUT

  docker-build:
    runs-on: ubuntu-latest
    needs: [tests]
    env:
      REGISTRY: ${{ inputs.registry }}
      IMAGE_NAME: ${{ inputs.registry-path }}/${{ inputs.app-name }}/${{ inputs.environment }}
      TAG: ${{ needs.tests.outputs.tag }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Docker login to Yandex Registry
      run: |
        echo "${{ secrets.YC_IAM_TOKEN }}" | docker login -u iam --password-stdin $REGISTRY

    - name: Build and push app image to registry
      run: |
        docker buildx build \
          --platform linux/amd64 \
          --cache-from=type=registry,ref=$REGISTRY/$IMAGE_NAME-app:buildcache \
          --cache-to=type=registry,ref=$REGISTRY/$IMAGE_NAME-app:buildcache,mode=max \
          -t $REGISTRY/$IMAGE_NAME-app:$TAG \
          -t $REGISTRY/$IMAGE_NAME-app:latest \
          --push ./02-microservice-testing/app

    - name: Build and push mocks image to registry
      run: |
        docker buildx build \
          --platform linux/amd64 \
          --cache-from=type=registry,ref=$REGISTRY/$IMAGE_NAME-mocks:buildcache \
          --cache-to=type=registry,ref=$REGISTRY/$IMAGE_NAME-mocks:buildcache,mode=max \
          -t $REGISTRY/$IMAGE_NAME-mocks:$TAG \
          -t $REGISTRY/$IMAGE_NAME-mocks:latest \
          --push ./02-microservice-testing/mocks

    - name: Build and push tests image to registry
      run: |
        docker buildx build \
          --platform linux/amd64 \
          --cache-from=type=registry,ref=$REGISTRY/$IMAGE_NAME-tests:buildcache \
          --cache-to=type=registry,ref=$REGISTRY/$IMAGE_NAME-tests:buildcache,mode=max \
          -t $REGISTRY/$IMAGE_NAME-tests:$TAG \
          -t $REGISTRY/$IMAGE_NAME-tests:latest \
          --push ./02-microservice-testing/tests

  # helm-release:
  #   runs-on: ubuntu-latest
  #   needs: [tests]
  #   env:
  #     REGISTRY: ${{ inputs.registry }}
  #     IMAGE_NAME: ${{ inputs.registry-path }}/${{ inputs.app-name }}/${{ inputs.environment }}
  #     TAG: ${{ needs.tests.outputs.tag }}
  #     CHART_PATH: ${{ inputs.helm-chart-path }}
  #   steps:
  #   - name: Checkout
  #     uses: actions/checkout@v4
  #     with:
  #       fetch-depth: 0

  #   - name: Install Helm
  #     uses: azure/setup-helm@v4

  #   - name: Update Chart.yaml with new version
  #     run: |
  #       echo "Version: $TAG"
  #       sed -i "s/^appVersion:.*$/appVersion: \"$TAG\"/" $CHART_PATH/Chart.yaml
  #       sed -i "s|repository:.*$|repository: \"$REGISTRY/$IMAGE_NAME\"|" "$CHART_PATH/values.yaml"
  #       sed -i "s/tag:.*$/tag: \"$TAG\"/" $CHART_PATH/values.yaml

  #   - name: Lint Helm chart
  #     run: |
  #       helm lint $CHART_PATH

  # security:
  #   runs-on: ubuntu-latest
  #   needs: [tests, docker-build]
  #   steps:
  #   - name: Set up variables
  #     id: vars
  #     run: |
  #       REGISTRY="${{ inputs.registry }}"
  #       IMAGE_PATH="${{ inputs.registry-path }}/${{ inputs.app-name }}/${{ inputs.environment }}"
  #       TAG="${{ needs.tests.outputs.tag }}"
  #       echo "image_ref=$REGISTRY/$IMAGE_PATH:$TAG" >> $GITHUB_OUTPUT

  #   - name: Login to Yandex Registry
  #     run: |
  #       echo "${{ secrets.YC_IAM_TOKEN }}" | docker login -u iam --password-stdin ${{ inputs.registry }}

  #   - name: Security scan with Trivy
  #     uses: aquasecurity/trivy-action@master
  #     with:
  #       image-ref: ${{ steps.vars.outputs.image_ref }}

  #   - name: Security scan with Trivy
  #     uses: aquasecurity/trivy-action@master
  #     with:
  #       image-ref: ${{ steps.vars.outputs.image_ref }}

  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: [tests, helm-release, security]
  #   env:
  #     REGISTRY: ${{ inputs.registry }}
  #     IMAGE_NAME: ${{ inputs.registry-path }}/${{ inputs.app-name }}/${{ inputs.environment }}
  #     TAG: ${{ needs.tests.outputs.tag }}
  #     CHART_PATH: ${{ inputs.helm-chart-path }}
  #     APP_NAME: ${{ inputs.app-name }}
  #   steps:
  #   - name: Checkout
  #     uses: actions/checkout@v4

  #   - name: Install Yandex CLI
  #     run: |
  #       curl -sSL https://storage.yandexcloud.net/yandexcloud-yc/install.sh | bash
  #       export PATH="$HOME/yandex-cloud/bin:$PATH"
  #       echo "$HOME/yandex-cloud/bin" >> $GITHUB_PATH

  #   - name: Configure yc and kubeconfig
  #     run: |
  #       echo "${{ secrets.YC_SA_KEY_BASE64 }}" | base64 -d > key.json
  #       export PATH="$HOME/yandex-cloud/bin:$PATH"

  #       yc config profile create otus
  #       yc config profile activate otus
  #       yc config set service-account-key key.json
  #       yc config set cloud-id ${{ secrets.YC_CLOUD_ID }}
  #       yc config set folder-id ${{ secrets.YC_FOLDER_ID }}

  #       # Получение kubeconfig с exec-авторизацией
  #       yc managed-kubernetes cluster get-credentials ${{ inputs.cluster-name }} \
  #         --external \
  #         --force

  #       kubectl get nodes

    # - name: Helm deploy
    #   run: |
    #     sed -i "s/^appVersion:.*$/appVersion: \"$TAG\"/" $CHART_PATH/Chart.yaml
    #     helm upgrade --install $APP_NAME ./$CHART_PATH \
    #       --namespace ${{ inputs.environment }} \
    #       --create-namespace --atomic --timeout 90s \
    #       --set image.repository=$REGISTRY/$IMAGE_NAME \
    #       --set image.tag=$TAG
          