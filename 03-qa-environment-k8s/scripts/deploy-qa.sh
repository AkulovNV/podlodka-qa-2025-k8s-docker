#!/bin/bash
# ===========================================
# –§–∞–π–ª: 03-qa-environment-k8s/scripts/deploy-qa.sh
# ===========================================

set -e

echo "‚ò∏Ô∏è  –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ QA –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ Kubernetes..."
echo "=============================================="

# –¶–≤–µ—Ç–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ kubectl
if ! command -v kubectl &> /dev/null; then
    log_error "kubectl –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ kubectl."
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–ª–∞—Å—Ç–µ—Ä—É
if ! kubectl cluster-info &> /dev/null; then
    log_error "–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Kubernetes –∫–ª–∞—Å—Ç–µ—Ä—É"
    echo "üí° –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:"
    echo "   ‚Ä¢ –ó–∞–ø—É—Å—Ç–∏—Ç–µ minikube: minikube start"
    echo "   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ kubeconfig: kubectl config current-context"
    echo "   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Docker Desktop Kubernetes"
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
if [[ ! -d "manifests" ]]; then
    log_error "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è manifests/ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ó–∞–ø—É—Å–∫–∞–π—Ç–µ –∏–∑ 03-qa-environment-k8s/"
    exit 1
fi

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤
mkdir -p logs
log_info "–°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è logs/"

NAMESPACE="qa-environment"
DEPLOYMENT_METHOD="manifests"

# –í—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
echo "üõ† –°–ø–æ—Å–æ–±—ã —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è:"
echo "1. Kubernetes –º–∞–Ω–∏—Ñ–µ—Å—Ç—ã (manifests/)"
echo "2. Helm —á–∞—Ä—Ç (helm/qa-app/)"
echo "3. –¢–æ–ª—å–∫–æ namespace –∏ –±–∞–∑–æ–≤—ã–µ —Ä–µ—Å—É—Ä—Å—ã"

read -p "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± (1-3, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1): " method_choice
case ${method_choice:-1} in
    2) DEPLOYMENT_METHOD="helm" ;;
    3) DEPLOYMENT_METHOD="basic" ;;
    *) DEPLOYMENT_METHOD="manifests" ;;
esac

log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è namespace..."
if kubectl get namespace "$NAMESPACE" &> /dev/null; then
    log_warning "Namespace $NAMESPACE —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    read -p "–ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å namespace? –≠—Ç–æ —É–¥–∞–ª–∏—Ç –≤—Å–µ —Ä–µ—Å—É—Ä—Å—ã! (y/N): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        kubectl delete namespace "$NAMESPACE"
        log_info "Namespace —É–¥–∞–ª–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π..."
        sleep 5
    fi
fi

if [[ "$DEPLOYMENT_METHOD" == "helm" ]]; then
    # –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é Helm
    log_info "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é Helm..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Helm
    if ! command -v helm &> /dev/null; then
        log_error "Helm –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Helm –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–±."
        exit 1
    fi
    
    # –°–æ–∑–¥–∞–µ–º namespace
    kubectl create namespace "$NAMESPACE" --dry-run=client -o yaml | kubectl apply -f -
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–∞—Ä—Ç
    helm upgrade --install qa-app ./helm/qa-app/ \
        --namespace "$NAMESPACE" \
        --values ./helm/qa-app/values.yaml \
        --wait \
        --timeout 300s || {
        log_error "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ Helm —á–∞—Ä—Ç–∞"
        exit 1
    }
    
    log_success "Helm —á–∞—Ä—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"

elif [[ "$DEPLOYMENT_METHOD" == "basic" ]]; then
    # –ë–∞–∑–æ–≤–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ
    log_info "–ë–∞–∑–æ–≤–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ..."
    
    kubectl apply -f - <<EOF
apiVersion: v1
kind: Namespace
metadata:
  name: $NAMESPACE
  labels:
    purpose: qa-testing
    environment: qa
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: qa-demo-app
  namespace: $NAMESPACE
spec:
  replicas: 1
  selector:
    matchLabels:
      app: qa-demo-app
  template:
    metadata:
      labels:
        app: qa-demo-app
    spec:
      containers:
      - name: app
        image: nginx:alpine
        ports:
        - containerPort: 80
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
---
apiVersion: v1
kind: Service
metadata:
  name: qa-demo-app-service
  namespace: $NAMESPACE
spec:
  selector:
    app: qa-demo-app
  ports:
  - port: 80
    targetPort: 80
  type: ClusterIP
EOF

    log_success "–ë–∞–∑–æ–≤—ã–µ —Ä–µ—Å—É—Ä—Å—ã —Å–æ–∑–¥–∞–Ω—ã"

else
    # –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –º–∞–Ω–∏—Ñ–µ—Å—Ç—ã
    log_info "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ Kubernetes –º–∞–Ω–∏—Ñ–µ—Å—Ç—ã..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –º–∞–Ω–∏—Ñ–µ—Å—Ç–æ–≤
    log_info "–í–∞–ª–∏–¥–∞—Ü–∏—è –º–∞–Ω–∏—Ñ–µ—Å—Ç–æ–≤..."
    if kubectl apply --dry-run=client -f manifests/ > /dev/null 2>&1; then
        log_success "–ú–∞–Ω–∏—Ñ–µ—Å—Ç—ã –≤–∞–ª–∏–¥–Ω—ã"
    else
        log_error "–û—à–∏–±–∫–∏ –≤ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞—Ö"
        exit 1
    fi
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∞–Ω–∏—Ñ–µ—Å—Ç—ã
    kubectl apply -f manifests/
    log_success "–ú–∞–Ω–∏—Ñ–µ—Å—Ç—ã –ø—Ä–∏–º–µ–Ω–µ–Ω—ã"
fi

# –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø–æ–¥–æ–≤
log_info "–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø–æ–¥–æ–≤..."
kubectl wait --for=condition=ready pod \
    --selector=app=qa-app \
    --namespace="$NAMESPACE" \
    --timeout=300s || {
    log_warning "–ü–æ–¥—ã –Ω–µ —Å—Ç–∞–ª–∏ –≥–æ—Ç–æ–≤—ã–º–∏ –∑–∞ 5 –º–∏–Ω—É—Ç"
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥–æ–≤:"
    kubectl get pods -n "$NAMESPACE"
}

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
echo ""
log_info "–°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è:"
echo "========================"

echo "üì¶ –ü–æ–¥—ã:"
kubectl get pods -n "$NAMESPACE" -o wide

echo ""
echo "üîå –°–µ—Ä–≤–∏—Å—ã:"
kubectl get services -n "$NAMESPACE" -o wide

echo ""
echo "üöÄ Deployments:"
kubectl get deployments -n "$NAMESPACE" -o wide

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
echo ""
echo "üéâ QA –æ–∫—Ä—É–∂–µ–Ω–∏–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ!"
echo "=========================="

# –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–µ
SERVICE_NAME=$(kubectl get services -n "$NAMESPACE" -o jsonpath='{.items[0].metadata.name}')
SERVICE_PORT=$(kubectl get services -n "$NAMESPACE" -o jsonpath='{.items[0].spec.ports[0].port}')

echo -e "${GREEN}–°–ø–æ—Å–æ–±—ã –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é:${NC}"
echo "‚Ä¢ Port forward: kubectl port-forward -n $NAMESPACE svc/$SERVICE_NAME 8080:$SERVICE_PORT"
echo "‚Ä¢ –í–Ω—É—Ç—Ä–∏ –∫–ª–∞—Å—Ç–µ—Ä–∞: http://$SERVICE_NAME.$NAMESPACE.svc.cluster.local:$SERVICE_PORT"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º ingress –µ—Å–ª–∏ –µ—Å—Ç—å
if kubectl get ingress -n "$NAMESPACE" &> /dev/null; then
    echo "‚Ä¢ Ingress: $(kubectl get ingress -n "$NAMESPACE" -o jsonpath='{.items[0].spec.rules[0].host}')"
fi

echo ""
echo -e "${BLUE}–ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:${NC}"
echo "‚Ä¢ kubectl get all -n $NAMESPACE                    # –≤—Å–µ —Ä–µ—Å—É—Ä—Å—ã"
echo "‚Ä¢ kubectl logs -f deployment/qa-app -n $NAMESPACE  # –ª–æ–≥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
echo "‚Ä¢ kubectl describe pod <pod-name> -n $NAMESPACE    # –¥–µ—Ç–∞–ª–∏ –ø–æ–¥–∞"
echo "‚Ä¢ ./scripts/port-forward.sh                        # –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ port-forward"
echo "‚Ä¢ ./scripts/get-logs.sh                           # —Å–±–æ—Ä –≤—Å–µ—Ö –ª–æ–≥–æ–≤"
echo "‚Ä¢ ./scripts/destroy-qa.sh                         # —É–¥–∞–ª–µ–Ω–∏–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è"

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–∏
cat > logs/deployment-info.txt <<EOF
QA Environment Deployment Info
==============================
Date: $(date)
Namespace: $NAMESPACE
Method: $DEPLOYMENT_METHOD
Cluster: $(kubectl config current-context)

Resources:
$(kubectl get all -n "$NAMESPACE")

Port Forward Command:
kubectl port-forward -n $NAMESPACE svc/$SERVICE_NAME 8080:$SERVICE_PORT
EOF

log_success "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ logs/deployment-info.txt"