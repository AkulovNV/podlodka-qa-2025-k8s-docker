# ===========================================
# –§–∞–π–ª: 02-microservice-testing/scripts/debug.sh
# ===========================================

#!/bin/bash

echo "üîç –û—Ç–ª–∞–¥–∫–∞ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
echo "====================================="

# –¶–≤–µ—Ç–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

if [[ ! -f "docker-compose.yml" ]]; then
    echo "–ó–∞–ø—É—Å–∫–∞–π—Ç–µ –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ 02-microservice-testing/"
    exit 1
fi

echo "üõ† –î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø—Ü–∏–∏ –æ—Ç–ª–∞–¥–∫–∏:"
echo "1. –°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"
echo "2. –õ–æ–≥–∏ —Å–µ—Ä–≤–∏—Å–∞"  
echo "3. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
echo "4. –ü—Ä–æ–≤–µ—Ä–∫–∞ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤"
echo "5. –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"
echo "6. –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π shell –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ"
echo "7. –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É —Å–µ—Ä–≤–∏—Å–∞–º–∏"

read -p "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é (1-7): " choice

case $choice in
    1)
        log_info "–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:"
        docker-compose ps
        
        echo ""
        log_info "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤:"
        docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.NetIO}}"
        ;;
    2)
        echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:"
        docker-compose ps --services
        read -p "–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å–µ—Ä–≤–∏—Å–∞: " service
        
        echo "–û–ø—Ü–∏–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤:"
        echo "1. –ü–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å—Ç—Ä–æ–∫"
        echo "2. –°–ª–µ–¥–∏—Ç—å –∑–∞ –ª–æ–≥–∞–º–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"
        echo "3. –õ–æ–≥–∏ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"
        read -p "–í—ã–±–µ—Ä–∏—Ç–µ (1-3): " log_option
        
        case $log_option in
            1) docker-compose logs --tail 50 "$service" ;;
            2) docker-compose logs -f "$service" ;;
            3) 
                read -p "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2023-12-01T10:00:00): " timestamp
                docker-compose logs --since "$timestamp" "$service"
                ;;
        esac
        ;;
    3)
        log_info "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL..."
        docker-compose exec db psql -U user -d testdb -c "\dt"
        
        echo ""
        echo "–ü–æ–ª–µ–∑–Ω—ã–µ SQL –∫–æ–º–∞–Ω–¥—ã:"
        echo "‚Ä¢ \dt                 - —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü"
        echo "‚Ä¢ \d table_name       - —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã"
        echo "‚Ä¢ SELECT * FROM users LIMIT 5;"
        echo ""
        read -p "–û—Ç–∫—Ä—ã—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π psql? (y/N): " -n 1 -r
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            docker-compose exec db psql -U user -d testdb
        fi
        ;;
    4)
        log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤..."
        
        endpoints=(
            "http://localhost:8000/health|GET|App Health"
            "http://localhost:8001/health|GET|Mock Health"
            "http://localhost:8000/ready|GET|App Readiness"
            "http://localhost:8000/users|GET|Users List"
            "http://localhost:8001/orders/1|GET|Mock Orders"
        )
        
        for endpoint in "${endpoints[@]}"; do
            IFS='|' read -r url method description <<< "$endpoint"
            echo -n "Testing $description... "
            if curl -s -f "$url" > /dev/null; then
                echo -e "${GREEN}OK${NC}"
            else
                echo -e "${RED}FAIL${NC}"
            fi
        done
        
        echo ""
        read -p "–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–π URL? (y/N): " -n 1 -r
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            echo
            read -p "–í–≤–µ–¥–∏—Ç–µ URL: " custom_url
            echo "–û—Ç–≤–µ—Ç:"
            curl -s "$custom_url" | jq . 2>/dev/null || curl -s "$custom_url"
        fi
        ;;
    5)
        echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:"
        docker-compose ps --services
        read -p "–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å–µ—Ä–≤–∏—Å–∞: " service
        
        log_info "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ $service:"
        docker-compose exec "$service" env | sort
        ;;
    6)
        echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:"
        docker-compose ps --services
        read -p "–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å–µ—Ä–≤–∏—Å–∞: " service
        
        log_info "–û—Ç–∫—Ä—ã—Ç–∏–µ shell –≤ $service..."
        docker-compose exec "$service" /bin/bash || docker-compose exec "$service" /bin/sh
        ;;
    7)
        log_info "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≤—è–∑–∏ –º–µ–∂–¥—É —Å–µ—Ä–≤–∏—Å–∞–º–∏..."
        
        echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∏ app -> db:"
        docker-compose exec app ping -c 1 db && echo -e "${GREEN}OK${NC}" || echo -e "${RED}FAIL${NC}"
        
        echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∏ app -> mock-server:"
        docker-compose exec app ping -c 1 mock-server && echo -e "${GREEN}OK${NC}" || echo -e "${RED}FAIL${NC}"
        
        echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ HTTP —Å–≤—è–∑–∏ app -> mock-server:"
        docker-compose exec app curl -s http://mock-server:8001/health | jq . 2>/dev/null && echo -e "${GREEN}OK${NC}" || echo -e "${RED}FAIL${NC}"
        ;;
    *)
        echo "–ù–µ–≤–µ—Ä–Ω–∞—è –æ–ø—Ü–∏—è"
        exit 1
        ;;
esac

log_success "–û—Ç–ª–∞–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"