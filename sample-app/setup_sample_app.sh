#!/bin/bash
# –§–∞–π–ª: sample-app/setup_sample_app.sh
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

set -e

echo "üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Sample App –¥–ª—è QA DevOps Workshop"
echo "=============================================="

# –¶–≤–µ—Ç–∞
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
if [[ $(basename "$(pwd)") != "sample-app" ]]; then
    log_error "–ó–∞–ø—É—Å–∫–∞–π—Ç–µ –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ sample-app/"
    exit 1
fi

log_info "–®–∞–≥ 1: –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π..."
mkdir -p {static,templates}

log_info "–®–∞–≥ 2: –°–æ–∑–¥–∞–Ω–∏–µ Dockerfile..."
cat > Dockerfile <<'EOF'
FROM python:3.11-slim

ENV PYTHONUNBUFFERED=1

RUN apt-get update && apt-get install -y curl && rm -rf /var/lib/apt/lists/*

WORKDIR /app

COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

COPY . .

RUN adduser --disabled-password --gecos '' appuser && \
    chown -R appuser:appuser /app
USER appuser

EXPOSE 5050

HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:5050/health || exit 1

CMD ["python", "app.py"]
EOF

log_success "Dockerfile —Å–æ–∑–¥–∞–Ω"

log_info "–®–∞–≥ 3: –°–æ–∑–¥–∞–Ω–∏–µ requirements.txt..."
cat > requirements.txt <<'EOF'
flask==3.0.0
requests==2.31.0
gunicorn==21.2.0
EOF

log_success "Requirements.txt —Å–æ–∑–¥–∞–Ω"

log_info "–®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤..."

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
required_files=("app.py" "config.py" "templates/index.html" "static/style.css" "static/app.js")
missing_files=0

for file in "${required_files[@]}"; do
    if [[ ! -f "$file" ]]; then
        log_error "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∞–π–ª: $file"
        ((missing_files++))
    else
        log_success "–ù–∞–π–¥–µ–Ω: $file"
    fi
done

if [[ $missing_files -gt 0 ]]; then
    log_error "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç $missing_files —Ñ–∞–π–ª–æ–≤. –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é..."
    
    # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é app.py –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if [[ ! -f "app.py" ]]; then
        cat > app.py <<'EOF'
from flask import Flask, jsonify
import os
from datetime import datetime

app = Flask(__name__)

@app.route('/')
def home():
    return '<h1>üöÄ QA Demo App</h1><p>–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ!</p><p><a href="/health">Health Check</a></p>'

@app.route('/health')
def health():
    return jsonify({
        "status": "healthy",
        "service": "qa-demo-app",
        "timestamp": datetime.utcnow().isoformat()
    })

@app.route('/api/users')
def api_users():
    return jsonify({
        "users": [
            {"id": 1, "name": "Test User", "email": "test@example.com"}
        ]
    })

if __name__ == '__main__':
    PORT = int(os.environ.get('PORT', 5050))
    app.run(host='0.0.0.0', port=PORT, debug=True)
EOF
        log_success "–°–æ–∑–¥–∞–Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è app.py"
    fi
fi

log_info "–®–∞–≥ 5: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–±–æ—Ä–∫–∏ Docker –æ–±—Ä–∞–∑–∞..."
if command -v docker &> /dev/null; then
    if docker build -t sample-app-test . > /dev/null 2>&1; then
        log_success "Docker –æ–±—Ä–∞–∑ —Å–æ–±–∏—Ä–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
        docker rmi sample-app-test > /dev/null 2>&1 || true
    else
        log_warning "–ü—Ä–æ–±–ª–µ–º—ã —Å–æ —Å–±–æ—Ä–∫–æ–π Docker –æ–±—Ä–∞–∑–∞"
    fi
else
    log_warning "Docker –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç —Å–±–æ—Ä–∫–∏"
fi

log_info "–®–∞–≥ 6: –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–æ–≤ –∑–∞–ø—É—Å–∫–∞..."

# –°–∫—Ä–∏–ø—Ç –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
cat > run_local.sh <<'EOF'
#!/bin/bash
echo "üèÉ –õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ Sample App"
echo "============================="

# –ü—Ä–æ–≤–µ—Ä—è–µ–º Python
if ! command -v python3 &> /dev/null; then
    echo "‚ùå Python 3 –Ω–µ –Ω–∞–π–¥–µ–Ω"
    exit 1
fi

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
echo "üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
pip3 install -r requirements.txt

# –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
echo "üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..."
export FLASK_ENV=development
python3 app.py
EOF

chmod +x run_local.sh

# –°–∫—Ä–∏–ø—Ç Docker –∑–∞–ø—É—Å–∫–∞
cat > run_docker.sh <<'EOF'
#!/bin/bash
echo "üê≥ Docker –∑–∞–ø—É—Å–∫ Sample App"
echo "=========================="

# –ü—Ä–æ–≤–µ—Ä—è–µ–º Docker
if ! command -v docker &> /dev/null; then
    echo "‚ùå Docker –Ω–µ –Ω–∞–π–¥–µ–Ω"
    exit 1
fi

echo "üî® –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞..."
docker build -t sample-app .

echo "üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞..."
docker run --rm \
    -p 5050:5050 \
    --name sample-app-container \
    sample-app

echo "‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ –Ω–∞ http://localhost:5050"
EOF

chmod +x run_docker.sh

# –°–∫—Ä–∏–ø—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
cat > test_app.sh <<'EOF'
#!/bin/bash
echo "üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Sample App"
echo "========================="

BASE_URL="http://localhost:5050"

test_endpoint() {
    local endpoint=$1
    local description=$2
    
    echo -n "–¢–µ—Å—Ç–∏—Ä—É–µ–º $description... "
    if curl -s -f "$BASE_URL$endpoint" > /dev/null; then
        echo "‚úÖ OK"
    else
        echo "‚ùå FAIL"
    fi
}

echo "–ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..."
sleep 3

test_endpoint "/" "–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"
test_endpoint "/health" "Health check" 
test_endpoint "/api/users" "Users API"

echo ""
echo "üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
EOF

chmod +x test_app.sh

log_success "–°–∫—Ä–∏–ø—Ç—ã –∑–∞–ø—É—Å–∫–∞ —Å–æ–∑–¥–∞–Ω—ã"

log_info "–®–∞–≥ 7: –°–æ–∑–¥–∞–Ω–∏–µ README..."
cat > README.md <<'EOF'
# üöÄ Sample App - QA DevOps Workshop

–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü–∏–∏ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.

## üèÉ‚Äç‚ôÇÔ∏è –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç

### –õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫
```bash
./run_local.sh
```

### Docker –∑–∞–ø—É—Å–∫
```bash
./run_docker.sh
```

### –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
```bash
./test_app.sh
```

## üîå API –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã

- `GET /` - –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
- `GET /health` - Health check
- `GET /ready` - Readiness check
- `GET /api/users` - –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
- `POST /api/users` - –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
- `GET /api/stats` - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

## üß™ –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤–∫–ª—é—á–∞–µ—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏:
- HTTP —Å—Ç–∞—Ç—É—Å –∫–æ–¥—ã
- JSON API –æ—Ç–≤–µ—Ç—ã
- Health checks
- –°–∏–º—É–ª—è—Ü–∏—è –æ—à–∏–±–æ–∫

## üê≥ Docker

```bash
# –°–±–æ—Ä–∫–∞
docker build -t sample-app .

# –ó–∞–ø—É—Å–∫
docker run -p 5050:5050 sample-app

# –° –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
docker run -p 5050:5050 -e FLASK_ENV=production sample-app
```
EOF

log_success "README.md —Å–æ–∑–¥–∞–Ω"

# –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
echo ""
echo "üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:"
echo "================================"

files_to_check=("Dockerfile" "requirements.txt" "app.py" "run_local.sh" "run_docker.sh" "test_app.sh" "README.md")

for file in "${files_to_check[@]}"; do
    if [[ -f "$file" ]]; then
        echo -e "${GREEN}‚úÖ $file${NC}"
    else
        echo -e "${RED}‚ùå $file${NC}"
    fi
done

echo ""
echo "üéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Sample App –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
echo "=================================="
echo ""
echo -e "${GREEN}üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞:${NC}"
echo "sample-app/"
echo "‚îú‚îÄ‚îÄ üê≥ Dockerfile              # Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä"  
echo "‚îú‚îÄ‚îÄ üì¶ requirements.txt        # Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"
echo "‚îú‚îÄ‚îÄ üêç app.py                  # Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"
echo "‚îú‚îÄ‚îÄ ‚öôÔ∏è  config.py               # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è"
echo "‚îú‚îÄ‚îÄ üìÑ templates/              # HTML —à–∞–±–ª–æ–Ω—ã"
echo "‚îú‚îÄ‚îÄ üé® static/                 # CSS –∏ JavaScript"
echo "‚îú‚îÄ‚îÄ üèÉ run_local.sh            # –õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫"
echo "‚îú‚îÄ‚îÄ üê≥ run_docker.sh           # Docker –∑–∞–ø—É—Å–∫"  
echo "‚îú‚îÄ‚îÄ üß™ test_app.sh             # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"
echo "‚îî‚îÄ‚îÄ üìã README.md               # –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è"
echo ""
echo -e "${BLUE}üöÄ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:${NC}"
echo "1. ./run_docker.sh             # –ó–∞–ø—É—Å–∫ –≤ Docker"
echo "2. –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:5050"
echo "3. ./test_app.sh              # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API"
echo ""
echo -e "${YELLOW}üí° –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ —Ç–µ—Å—Ç–∞—Ö:${NC}"
echo "‚Ä¢ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –¥–ª—è UI –∏ API —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
echo "‚Ä¢ Health checks –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"
echo "‚Ä¢ JSON API –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"
